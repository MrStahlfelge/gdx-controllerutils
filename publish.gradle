apply plugin: 'maven-publish'
apply plugin: 'signing'

def isLocalBuild() {
    return hasProperty("LOCAL")
}

def isReleaseBuild() {
    return hasProperty("RELEASE")
}

def isSnapshotBuild() {
    return hasProperty("SNAPSHOT")
}

def getLocalRepositoryUrl() {
    return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
            : 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return GROUPID
}

def getArtifactId() {
    return ARTIFACTID
}

def getVersion() {
    if (isReleaseBuild()) {
        return VERSION.replace("-SNAPSHOT", "")
    } else {
        return VERSION
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            if (false && isLocalBuild()) {
                url = getLocalRepositoryUrl()
            } else {
                if (isReleaseBuild()) {
                    url = getReleaseRepositoryUrl()
                } else if (true || isSnapshotBuild()) {
                    url = getSnapshotRepositoryUrl()
                }
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }
    publications {
        maven(MavenPublication) { publication ->
            groupId = getGroupId()
            artifactId = getArtifactId()
            version = getVersion()

            project.shadow.component(publication)
            pom {
                name = 'gdx-controllerutils'
                description = 'Game Controller Utilities for libGDX'
                url = 'https://github.com/MrStahlfelge/gdx-controllerutils'

                scm {
                    url = 'scm:git@github.com:MrStahlfelge/gdx-controllerutils.git'
                    connection = 'scm:git@github.com:MrStahlfelge/gdx-controllerutils.git'
                    developerConnection = 'scm:git@github.com:MrStahlfelge/gdx-controllerutils.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'MrStahlfelge'
                        name = 'Benjamin Schulte'
                        email = 'lightblocks@golfgl.de'
                    }
                }
            }
        }
    }
}


signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign publishing.publications.maven
}
